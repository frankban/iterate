// Licensed under the MIT license, see LICENSE file for details.

package iterate

// Iterator is implemented by types producing values of type T. Implementations
// are typically used in for loops, for instance:
//
//     for iterator.Next() {
//         v := iterator.Value()
//         // Do something with v.
//     }
//     if err := iterator.Err(); err != nil {
//         // Handle error.
//     }
//
// Depending on the implementation, producing values might lead to errors. For
// this reason it is important to always check Err() after iterating.
type Iterator[T any] interface {
	// Next advances the iterator. The next value can be then retrieved using
	// the Value method. False is returned when the iteration is done. Further
	// calls to Next should just return false with no other side effects. When
	// iterating produces an error, false is returned, and Err() returns the
	// error.
	Next() bool

	// Value returns the most recent value generated by a call to Next. It may
	// be called any number of times between calls to Next. If called after Next
	// has returned false, it returns the zero value.
	Value() T

	// Err returns the first error occurred while iterating.
	Err() error
}
